import { Observable } from "rxjs/internal/Observable";
import {
  ResponseGalleryPaging,
  Gallery,
  GalleryFaceRecognition,
  GalleryFaceRecognitionUpdate,
  GetRefreshedGalleryResponse,
} from "@/services/commons/types";
import Axios, { AxiosInstance, AxiosResponse, AxiosError } from "axios";
import { BaseServices } from "@/services/commons/base";

const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:9091";

export const api = Axios.create({
  baseURL: `${BASE_URL}`,
  timeout: 60000 * 2,
});

export interface GalleryService {
  getGallery(token: string,page: number,eventId: String): Observable<ResponseGalleryPaging>;
  getGalleryByShareId(shareId: string): Observable<Gallery[]>;
  getImageById(token: string, id: string): Observable<Gallery>;
  // getSlideShow(page: number, eventId: String): Observable<ResponseGalleryPaging>;
  // getSharedGalleryImages(eventId: String, gallery: string[]): Observable<string>;
  // getGalleryByDeepfacePhoto(eventId: string, content: File): Observable<GalleryFaceRecognition>;
  // getRefreshedGallery(eventId: string): Observable<GetRefreshedGalleryResponse>;
  // getSelfieUpdate(fetchUrl: string): Observable<GalleryFaceRecognitionUpdate>;
  // subscribeToFaceRecognitionUpdate(eventID: string, faceId: string, email: string): Observable<string>;
  // subscribeToFaceRecognitionUpdateWithPhone(eventID: string, faceId: string, phone: string): Observable<string>;
}

export interface Response<T> {
  code: number;
  data?: T;
  error_message?: string;
}

export function handleResponse<T>(res: AxiosResponse<T>): T {
  return res.data;
}

export function catchError(error: AxiosError<Response<any>>): Response<any> {
  if (error.response) {
    // The request was made and the server responded with a status code
    // that falls out of the range of 2xx
    // console.log(error.response.data);
    // console.log(error.response?.data?.code);
    // console.log(error.response?.data?.error_message);
    const data = error.response?.data || "";

    if (typeof data === "string") {
      return {
        code: error.response?.status,
        data: undefined,
        error_message: data,
      };
    }

    return error.response?.data;
  }

  if (error.request) {
    // The request was made but no response was received
    // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
    // http.ClientRequest in node.js
    // console.log(error.request);
    return {
      code: 400,
      data: undefined,
      error_message:
        "Networks: problems in networks, generated by UI, " +
        error.request?.toString(),
    };
  }

  // Something happened in setting up the request that triggered an Error
  // console.log('Error', error.message);
  return {
    code: 400,
    data: undefined,
    error_message: "Unknown error: generated by UI, " + error.message,
  };
}

export class GalleryServiceImpl extends BaseServices implements GalleryService {
  private userUid: string;

  constructor(axios: AxiosInstance, userUid: string) {
    super(axios);
    this.userUid = userUid;
  }

  getGallery(
    token: string,
    page: number,
    eventId: String
  ): Observable<ResponseGalleryPaging> {
    const url = "/public/gallery/pagination";
    const params = { token: token, page: page, event_id: eventId };
    return this.axiosGetObservable(url, {
      params: params,
      headers: {
        Authorization: `Bearer ${token}`,
        FirebaseUID: `${this.userUid}`,
      },
    });
  }

  getGalleryByShareId(shareId: string): Observable<Gallery[]> {
    const url = `/public/share/ids`;
    const params = { id: shareId };
    return this.axiosGetObservable<Gallery[]>(url, { params });
  }

  getImageById(token: string, id: string): Observable<Gallery> {
    const url = `/gallery/single`;
    const headers = { 
        params: { id }, 
        headers: {
            Authorization: `Bearer ${token}`,
            FirebaseUID: `${this.userUid}`,
        } 
    };
    return this.axiosGetObservable<Gallery>(url, headers);
  }
}
